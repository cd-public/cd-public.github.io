---
title: Graphs
theme: dark
author: Prof. Calvin
subtitle: "Week 0xB I"
institute: Crypto
format: 
    revealjs: 
        code-fold: true
        theme: dark
        mainfont: monospace
        slide-number: true
        show-slide-number: all
        width: 1050
        height: 700
        footer: "[Home](../index.html)"

execute:
    echo: true
    cache: true
    freeze: true  # never re-render during project render
    code-fold: false
---

# Announcements

- **Welcome** to variously CS 276/CS 540
  - Graphs, to introduce
    - DAGs
  - Trees, to introduce,
  - Hash or Merkle trees
- **Action Items**:
  - tree_t after this

# Today

- Graphs
    - DAGs
    - Trees

# Trees

# $n$-ary Trees

- A tree is a type of graph.
- A graph is a pair of
    - A set of "nodes" or "vertices" (or "vertexes")
    - A set of "edges" which are pairs of nodes
        - They may be ordered pairs or not.


# Graphs

* There are many ways to understand graphs, but I actually think graph theory is quite accessible.
* I think it's also easier when using a running example.
* I will also use a running example, Amtrak 🚄
    * Or perhaps... a training example?
    * I am training... to run?????
    * ???????????
    
# Amtrak 🚄

<center>
<img style="border-radius: 50%;height:100%" src="https://www.amtrak.com/content/dam/projects/dotcom/english/public/images/Carousel/Landing_Feature_03.gif">
</center>

# Graph: Definition

* A graph is an **ordered pair**.
    * That is: two things, in a fixed order.
    * An ordered pair can be thought of as a sequence of length 2
        
        ```{.python}
        a = "one thing"
        b = "another thing"
        ordered_pair = [a,b]
        ```

# Not Sets
        
* A graph is not a set:
        
```{.python}
>>> [a,b][0]
'one thing'
>>> {a,b}[0]
<stdin>:1: SyntaxWarning: 'set' object is not subscriptable; perhaps you missed a comma?
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'set' object is not subscriptable
```
* [I just set them up just to knock them down.](https://www.youtube.com/watch?v=dvf--10EYXw)

# Aside: Pairs

-  Take a number plane (click):

<p><span style="position:relative;left:275px">y=2</span></p>
<p><span style="position:relative;top:-190px">x=-2</span>
<span style="vertical-align:middle;" onclick="draw1();">
  <canvas id="plot1"  width="400" height="400" style="background-color:white"></canvas>
</span>
<span style="position:relative;top:-190px">x=2</span>
<p><span style="position:relative;left:275px">y=2</span></p>
<script>
function draw1()
{
	const plot1 = document.getElementById("plot1") ;
	const ctx1 = plot1.getContext("2d");
	ctx1.fillStyle = "black";	
	ctx1.fillRect(200, 0, 5, 400) ;
	ctx1.fillRect(0, 200, 400, 5) ;
	
	ctx1.fillRect(195, 100, 15, 5) ;
	ctx1.fillRect(195, 300, 15, 5) ;
	ctx1.fillRect(100, 195, 5, 15) ;
	ctx1.fillRect(300, 195, 5, 15) ;
}</script>


# Aside: Pairs

* Denote ordered pair (.5,1.5) in <span style="color:red">red</span>. 

<p><span style="position:relative;left:275px">y=2</span></p>
<p><span style="position:relative;top:-190px">x=-2</span>
<span style="vertical-align:middle;" onclick="draw2();">
  <canvas id="plot2"  width="400" height="400" style="background-color:white"></canvas>
</span>
<span style="position:relative;top:-190px">x=2</span>
<p><span style="position:relative;left:275px">y=2</span></p>
<script>
function draw2()
{
	const plot1 = document.getElementById("plot2") ;
	const ctx1 = plot1.getContext("2d");
	ctx1.fillStyle = "black";	
	ctx1.fillRect(200, 0, 5, 400) ;
	ctx1.fillRect(0, 200, 400, 5) ;
	
	ctx1.fillRect(195, 100, 15, 5) ;
	ctx1.fillRect(195, 300, 15, 5) ;
	ctx1.fillRect(100, 195, 5, 15) ;
	ctx1.fillRect(300, 195, 5, 15) ;
	ctx1.fillStyle = "red";	
	ctx1.fillRect(245, 45, 10, 10) ;
	ctx1.fillRect(245, 45, 10, 10) ;
}</script>

# Pair: Definition

* We construct pairs from sets.
    * An ordered pair is a set of cardinality two. (2 elements)
    * One element of the set is a set of cardinality one. (1 element)
    * The other element of the set is a set of cardinality two (2 elements)
    * The element of the set of cardinality one is one of the two elements of the set of cardinality two.

# Pair: Definition

* The element of both sets is regarded as the first element.
* This doesn't work in Python since Python sets can't contain other sets:
        
```{.python}
>>> [a,b] # ordered pair
['one thing', 'another thing']
>>> {{a},{a,b}} # ordered pair with sets
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'set'
>>>
```
* But this is an implementation hurdle, and not a logical one.

# Pair: Definition

::: {.callout-note appearance="simple"}

# Ordered Pair

An ordered pair is a set of two elements, a set containing the head element of the pair, and a set containing both elements of the pair.

:::

```{.lisp}
(a, b) := p : { {a} , {a, b} }
```

# "Head"

* Extract the head item by taking the intersection of all of the elements of p
    * I denote this 'Head(p)'

$$
\begin{align*}
\text{Head}(p) &:= x : x \in \bigcap p \\
\text{Head}(p) &:= x : \forall Y \in p : x \in Y
\end{align*}
$$

# "Tail"

* The tail is the sole element of the union that is not an element of the intersection, with the caveat that we do not consider the case in which the head and tail differ
    * I denote this 'Tail(p)'

$$
\begin{align*}
\text{Tail}(p) &:= x : x \in \bigcup p \setminus \bigcap p \\
\text{Tail}(p) &:= x : \exists Y_1, Y_2 \in p : x \in Y_1 \land x \notin Y_2
\end{align*}
$$


# Graph: Definition

* A graph is an **ordered pair** $G$
* We denote the two elements of the pair as:
    * $V$ for vertices
    * $E$ for edges
$$
G = (V, E) := \{ \{V\}, \{V,E\}\}
$$

# In Amtrak

* $V$, the vertices or nodes, stations or stops or cities,
    * like Portland and Seattle, or
    * like Kings St Station and Central Station
* $E$, the edges, are the connections to adjacent stations
    * like Portland and Oregon City, or Portland and Vancouver, WA.

# Graph: Definition

* An `Amtrak` is an **ordered pair**
* We denote the two elements of the pair as:
    * Stations for train stations used by Amtrak passengers, and
    * Trains which Amtrak passengers ride between stations.

Amtrak = (Stations, Trains)

# Nodes, Vertices, or $V$

* Let us consider the "Amtrak Cascades"
* The set of vertices is the set of stations:

||||||
| --------------- | --------------- | --------------- | ------------ | ---|
| ALBANY        | EVERETT         | PORTLAND        | TUKWILA      | EUGENE          |
| BELLINGHAM      | KELSO/LONGVIEW  | SALEM           | VANCOUVER BC | OREGON CITY     |
| CENTRALIA       | MOUNT VERNON    | SEATTLE         | VANCOUVER WA | TACOMA          |  
| EDMONDS         | OLYMPIA/LACEY   | STANWOOD        |

# Nodes, Vertices, or $V$

* Restrict our example to the PDX<->SEA 6x daily trains:

|||||
| -------------- | ------------- | --------- | ---------- |
| CENTRALIA      | OLYMPIA/LACEY | SEATTLE   | TUKWILA    |
| KELSO/LONGVIEW | PORTLAND      | TACOMA    | VANCOUVER WA |

# Edges or $E$

* $E$ is a set of elements termed 'edges', 'links', or 'lines'
    * The edges are pairs of vertices
    * In an *undirected graph*, edges are unordered pairs (sets of cardinality two)
    * In an *directed graph*, edges are ordered pairs (not subsets then)
    * Amtrak is undirected, trains are directed.

# Directionality

* The internet is directed.
    * We may use 'curl' to download files from a url, but going the other way (creating files at a url) is highly nontrivial.
* Pointers are directed.
    * Recall, `*p` refers to the value at location `p`.
    * `**p` does not refer to to `p`, rather, we would use `&` to go in the reverse direction.


# Route

* Order north-to-south:
    
    ```
    SEATTLE
    TUKWILA
    TACOMA
    OLYMPIA/LACEY
    CENTRALIA
    KELSO/LONGVIEW
    VANCOUVER WA
    PORTLAND
    ```
    
* Centralia and Keslo/Longview is an edge.
* The others, like Seattle and Tacoma, are not edges.

# Edges or $E$

* Our edges are pairs of *adjacent* stations
* There are 8 stations so there are 7 edges

|||
| ----------------- | ------------------- |
| (SEATTLE,         TUKWILA)       | (CENTRALIA,       KELSO) |
| (TUKWILA,         TACOMA)        | (KELSO, VANCOUVER) |
| (TACOMA,          OLYMPIA) | (VANCOUVER,   PORTLAND)      |
| (OLYMPIA,   CENTRALIA)   |                     |


# Notation


* I use tuple notion here, with parens, but it would be equally proper to use set notatation for an undirected graph.
* Also I maintained geographic ordering (as a convenience) but it would be more proper to have no particular order since E is a set.


# Graph: Definition

* We can express G using only sets over elements of stations (this is basically JSON):
    
    ```json
    G = {
      V = {
        SEATTLE,
        TUKWILA,
        TACOMA,
        OLYMPIA/LACEY,
        CENTRALIA,
        KELSO/LONGVIEW,
        VANCOUVER WA
        PORTLAND,
      }, 
      {
        V,
        E = {
                  {
                      TUKWILA,
                      TACOMA
                  },
                  {
                      TACOMA,
                      OLYMPIA/LACEY
                  },
                  {
                      OLYMPIA/LACEY,
                      CENTRALIA
                  },
                  {
                      CENTRALIA,
                      KELSO/LONGVIEW
                  },
                  {
                      KELSO/LONGVIEW,
                      VANCOUVER WA
                  },
                  {
                      VANCOUVER WA,
                      PORTLAND
                  }
              }
        }
    }
    ```

# Graph: Exercise

* Amtrak recently added lines, including the Hiawatha, with service from Milwaukee to the world's greatest city, Chicago.
    
    > From the grandeur of Grant Park’s Buckingham Fountain to iconic museums and skyscrapers, see for yourself why Chicago was once dubbed “Paris on the Prairie.” Engage in retail therapy on the Magnificent Mile or root for the home team within the friendly confines of famed Wrigley Field.
    
# Graph: Exercise

* As an exercise, construct the graph of the Hiawatha route using the JSON-ish notation I used for Cascades.
* The route is described [here](https://www.amtrak.com/routes/hiawatha-train.html) and contains five stations.
* You may use the three letter codes like "MKE" and "CHI" as a notational convenience if you would like.
* As a bonus: Write valid json. Here's a [tester](https://jsonformatter.curiousconcept.com/#).

# Today

- &check; Graphs
    - DAGs
    - Trees

# DAGs

::::{columns}

:::{.column width=50%}
  

* A DAG is a "directed acyclic graph".
* We will define rigorously.

:::

:::{.column width=50%}


<a style="filter: invert(.9);" title="Vector version of Image:Tred-G.png, Public domain, via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:Tred-G.svg"><img height="100%" alt="Tred-G" src="https://upload.wikimedia.org/wikipedia/commons/f/fe/Tred-G.svg"></a>

:::

::::



# Cycles


* *E* is a set of pairs of elements of *V*.
* We can think of edges in a graph as a homogenous binary relation.
    * Homogenous: From a set (the set of vertices) to itself.
    * Binary: Over two elements (just like edges)
    * Relation: A set (of pairs)

# Closures

* "Transitive closures" are defined over homogenous binary relations, so we can take a "transitive closure" over edges.

# Cartesian product

* A relation $R$ over a set $S$ is a set of pairs of elements of $S$
    * Or: a subset of the set of all pairs of elements

# Use $\times$

* We denote all pairs using a "Cartesian product":

* $S \times S$ in LaTeX 

```{.tex}
S \times S
```

* <em>S</em> &times; <em>S</em> in HTML
```{.html}
<em>S</em> &times; <em>S</em>
```

# Colors

* For example, over the set of traffic light colors $C$:
$$
C = \{ G, Y, R \}
$$
* The Cartesian product is all pairs:

$$
C \times C = \{ (G, Y), (G, R), (Y, R), (Y, G),(R, G), (R, Y) \}
$$ 

* Order matters.

# Relation

* A relation *R* over a set *S* is a set of pairs of elements of *S*
    * Or: a subset of the set of all pairs of elements in is transitive
* We begin with the Cartesian product:

$$
C \times C = \{ (G, Y), (G, R), (Y, R), (Y, G),(R, G), (R, Y) \}
$$ 

* Define traffic light $L \subset C \times C$

# Properties

* Construct $L$, the traffic light relation
    * No red without prior yellow
        $$
        (Y,X) \in L \implies X = R
        $$ 
    * All colors must appear in both positions
        $$
        \forall X \in C, \exists Y, Z \in C : \{ (X,Y), (Z,X) \} \subset L
        $$ 

# This gives

- The relation then is
$$
L = \{ (G, Y), (Y, R), (R, G)\}
$$
- We not this is a subset of $C \times C$

# Notation

- Variety of ways to express this.
    - Function application
        - `L(G) = Y`
    - Infix notation
        - `gLy`

# Matrix      

- Starting state on top, ending state on side

||$G$|$Y$|$R$|
|-|-|-|-|
$G$||x||
|$Y$|||x|
|$R$|x|||

- Astute blah blah its 9 bits

# Rainbow

- Vs. traffic light, we can take "wavelength" where colors are sorted by something physics something optics help I don't know this stuff.

<a title="Eric Rolph at English Wikipedia, CC BY-SA 2.5 &lt;https://creativecommons.org/licenses/by-sa/2.5&gt;, via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:Double-alaskan-rainbow.jpg"><img width="100%" alt="Double-alaskan-rainbow" src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Double-alaskan-rainbow.jpg/512px-Double-alaskan-rainbow.jpg?20070714083004"></a>

# Rainbow

- We note red is higher than yellow which is higher than green.
    - Green is higher than *nothing* or $\varnothing$

||$G$|$Y$|$R$|
|-|-|-|-|
$G$||x||
|$Y$|||x|
|$R$||||

# Rainbow

- We note that Rainbow $B$ ($R$ is taken) is also a binary relation.
- We will explore its properties.
$$
B \subset C \times C = \{ (R,Y), (Y,G) \}
$$

- We additionally note that while $R$ is immediately above $Y$, it is *also* above $G$

# Transitivitity

* Transitivity is over relation $R$  as follows.

$$ 
((a, b) \in R \land (b, c) \in R) \implies (a, c) \in R
$$

* For us, that would be,
$$
((R, Y) \in B \land (Y,G) \in B) \implies (R, G) \in B
$$
* In the rainbow case, this is true, $R$ appears above $G$ in the rainbow because $R$ is above $Y$ and $Y$ is above $G$.

# Closure

* Our initial relation was not transitive.

||$G$|$Y$|$R$|
|-|-|-|-|
$G$||x||
|$Y$|||x|
|$R$||||

* As in the Amtrak case, we considered only adjacent elements as a convenience, but that doesn't tell us if e.g. we can get from Seattle to Eugene.

# Closure

* To do that, we need to to preserve transitivity - and we do so using the notion of **transitive closure**
* A closure is an operation over sets, and in the case of binary relations, which are sets of pairs, is an operation over the relation itself, or the sets of pairs themselves (which are equivalent).

# Closure

* We denote the transitive closure of some relation $R$ as $R^+$
* First, the transitive closure *R⁺* of some relation *R* must contain all elements of *R*.

$$
R^+ \supseteq R
$$

* We recall we can use set operations like superset on $R$ as it is a set of pairs, in this case ordered.

*R⁺* ⊃ *R*

# Superset review

- That means that for all pairs (of colors, for example) in the binary relation $R$, each one of them is also in $R^+$

$$
\forall p \in R, p \in R^+
$$

$$
\forall x,y \in S, (x,y) \in R \subset S \times S \implies (x,y) \in R^+
$$


# Closure

* The transitive closure $R^+$ of some relation $R$ must be transitive.
* Recall:

$$ 
((a, b) \in R \land (b, c) \in R) \implies (a, c) \in R
$$


# Discussion

* Note: since this is a "for all", it means as we are required to add new elements to maintain transitivity, transitivity must apply to those new elements.
* So, if we add *SeattleAmtrakTacoma* because we have *SeattleAmtrakTukwila* and *TukwilaAmtrakTacoma*...
* We will then have to add *SeattleAmtrakOlympia* because *Amtrak* also contains *TukwilaAmtrakOlympia*

# Color Example

* If in rainbow relation $B$ we find <span style="color:red">$R$</span> is higher in the rainbow than <span style="color:yellow">$Y$</span> and <span style="color:yellow">$Y$</span> is higher in the rainbow than <span style="color:green">$G$</span> then 
$$
\{ (R,Y), (Y,G) \} \subseteq B
$$
* The transitive closure adds at least one additional element.
$$
\{ (R,Y), (Y,G), (R,G) \} \subseteq B^+
$$

# Closure

* *R⁺* must be the smallest possible relation for that is a transitive superset of *R*.
    * Cartesian Product is always transitive and a superset, but not always the smallest satisfying set.

# A note on graphs

* By the way those binary relations are graph edges between graph nodes (the elements of the original set).
* And by the way those edges are pointers.
* Okay keep going.

# Cycles

* We use transitive closure to define cycles
    * We consider a graph $G$

$$
G = (V, E) := \{ \{V\}, \{V,E\}\}
$$

* We note that $E$ is a homogenous binary relation over $V$
* Take $E^+$ the transitive closure of $E$

# Cycles

* $G$ contains a cycle (has the property of being cyclic) if $E^+$ contains an edge from a node to itself.

$\text{Cyclic}(G = (V, E)) := \exists v \in V: \{v, v\} \in E^+$

# Note

* Cycles are defined to be non-trivial, which means they don't contain "loops", so  an edge from a node to itself.
    * We don't think about this with Amtrak because we don't take a train from Portland to Portland

# Other Terms

* Circuits, walks, paths, and trails are also defined in graph theory and are related.
* Direct paths and undirected paths are, of course, distinct but intuitively so.
    * Cascades 503, a train which runs Seattle to Portland, has a Seattle to Tukwila edge but not a Tukwila to Seattle edge.
    * The Cascades route, which runs service between Vancouver, BC and Eugene, has both edges.


# DAGs

::::{columns}

:::{.column width=70%}
  

- A graph $G = (V,E)$ is a directed, acyclic graph if:
    - It's edges are directed, that is, $E$ is a set of ordered pairs, and
    - The transitive closure of it's edges $E^+$ contains no identity pairs.
:::

:::{.column width=30%}


<a style="filter: invert(.9);" title="Vector version of Image:Tred-G.png, Public domain, via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:Tred-G.svg"><img height="100%" alt="Tred-G" src="https://upload.wikimedia.org/wikipedia/commons/f/fe/Tred-G.svg"></a>

:::

::::


# DAGs

* Cascades 503 is a directed acyclic graph.
    * It has edges from all relative northern stations to all relative southern stations for all stations between Seattle and Portland inclusive.
* Amtrak Cascades is not a DAG
    * It is not directed - SLM->PDX or PDX->SLM
    * It contains cycles - PDX->SLM->PDX

# DAGs

* Color wavelength is a directed acyclic graph.
```{dot}
//| echo: false
digraph finite_automata {
  rankdir=LR; bgcolor="#191919";
  node [fontcolor = "#ffffff", color = "#ffffff"]
  edge [color = "#ffffff",fontcolor = "#ffffff"]

  node [shape=circle];

  R -> Y
  R -> G
  Y -> G

}
```

# DAGs

* A traffic light is not a directed graph but not an acyclic graph.

```{dot}
//| echo: false
digraph finite_automata {
  rankdir=LR; bgcolor="#191919";
  node [fontcolor = "#ffffff", color = "#ffffff"]
  edge [color = "#ffffff",fontcolor = "#ffffff"]

  node [shape=circle];

  Y -> R
  R -> G
  G -> Y
}
```

# DAGs

* Friendship, via mutual enthusiastic consent, is a neither directed nor, necessarily, acyclic.
* Facebook is not a DAG.

```{dot}
//| echo: false
graph G {
  graph [rankdir="LR"];
  bgcolor="#191919";
  node [fontcolor = "#ffffff", color = "#ffffff", shape=circle];
  edge [color = "#ffffff",fontcolor = "#ffffff"];
  n [label="Thelma"];
  m [label="Louise"];
  n -- m;
}
```

# CS Major DAG

<a style="filter: invert(1);" title="Vector version of Image:Tred-G.png, Public domain, via Wikimedia Commons" href="https://cd-public.github.io/advising/cse.html"><img height="80%" alt="Tred-G" src="https://cd-public.github.io/advising/photos/cse.png"></a>

# Today

- &check; Graphs
    - &check; DAGs
    - Trees

# Trees

- A tree is DAG where every node has at most one incoming edge.




Incentive
---------

*   The system only works if there's a reason to invest in mining
    
    > The incentive can also be funded with transaction fees
    
    *   If you really want your transaction to be accepted, offer a small amount of coinage as a transaction fee.
    *   This is done by creating a transaction with no receipient, and the default receipient is regarded as the miner.
    *   Transaction fees allow inflationless mining.
    *   The last bitcoin (21M'th) will be mined circa 2140 and the system will be fee-only at that time.
        
        > The incentive may help encourage nodes to stay honest.
        
    *   SN, paraphrased: Fees will likely be more lucrative than theft.
    *   CD: Attackers will likely be political motivated to destabilize the currency.

Pruning
-------

*   Bitcoin scaling is a real problem, but
*   There's a lot of ways to handle that.
*   Only the most recent transaction on a coin must be saved, for example.
    
    > Once the latest transaction in a coin is buried under enough blocks, the spent transactions before it can be discarded to save disk space.
    
*   This is done using a little thing called "Merkle Tree" which happens to be...
*   A Directed Acyclic Graph

[![Southwest Chief at Laguna, February 2020](Blockchain_files/Southwest_Chief_at_Laguna,_February_2020.jpg)](https://commons.wikimedia.org/wiki/File:Southwest_Chief_at_Laguna,_February_2020.jpg "Jerry Huddleston from Hampton, Minnesota, US, CC BY 2.0 <https://creativecommons.org/licenses/by/2.0>, via Wikimedia Commons")

_Graph Theory: Cool, Fun, Practical_

Merkle Tree
-----------

*   Disclosure: Wikipedia claims Merkle Trees are a computer science topic:
    
    > In cryptography and computer science, a hash tree or Merkle tree is a tree in which...
    
*   I am a computer scientist.
*   I'm sorry! I think they're really cool!
*   Anyways a 'tree' is a DAG where:
    *   There is a root node, with no incoming edges
    *   Every other edge has exactly one incoming edge

  
[![Tree (computer science)](Blockchain_files/Tree_(computer_science).svg.png)](https://commons.wikimedia.org/wiki/File:Tree_(computer_science).svg "Paddy3118, CC BY-SA 4.0 <https://creativecommons.org/licenses/by-sa/4.0>, via Wikimedia Commons")

I should probably say "hash tree" (descriptive name) but I'm really used to hearing "Merkle tree".

Merkle Tree
-----------

*   New term: Leaf (or leaf node)
    *   A leaf is a vertex (or node) of a tree with no outgoing edges.
*   In a hash tree, a leaf node contains some data and a hash of that data. `# Github Copilot wrote this given the name class HashTreeLeaf: def __init__(self, data): self.data = data self.hash = hash(data) def __hash__(self): return self.hash`

Merkle Tree
-----------

*   Every other node _n_ contains:
    *   A hash
    *   Computed over the the hashs
    *   Of the nodes, for which
    *   _n_ has a corresponding outgoing edge.
*   To my knowledge, all Merkle/hash trees are binary trees
    
    *   A binary tree is a tree in which no node has more than two outgoing edges.
    
    `# Github Copilot wrote this given the name class HashTreeNode: def __init__(self, left, rite): assert(left != None) # added by cd self.left = left self.rite = rite self.hash = hash(left)^hash(rite) def __hash__(self): return self.hash`
*   This allows non-leaf nodes to have one or two outgoing edges.

Binary Tree Ops
---------------

*   Binary trees, usually the special case of sorted binary search trees (BSTs), a mainstay of second semester CS education.
*   They are not in scope here.
*   If you need to implement a Merkle tree, find someone else's "binary search tree" code and add the hashing to it.
*   Generative AIs (all, not just Github Copilot) can usually do BSTs in any given language.
*   They cannot do Merkle trees (I checked ChatGPT, Gemini, Copilot) for some reason.
*   Realistically, engineering teams and not individuals should write anything expected to achieve cryptographic goals (too easy to make mistakes).

Merkle Tree
-----------

*   This is a very good visualization:  
    [![Hash Tree](Blockchain_files/Hash_Tree.svg.png)](https://commons.wikimedia.org/wiki/File:Hash_Tree.svg "Azaghal, CC0, via Wikimedia Commons")
*   All data/coins/transactions are in leaf nodes
*   Extremely difficulty to falsify anything, due to all the computed hashes
*   Old transactions can be discarded
*   Old enough trees may be empty (!!!) if all constituent coins are spent.
*   This is _likely_ since the most used coins are... the most used coins.

Merkle Tree
-----------

*   This is a very good visualization of pruning:

  
![](Blockchain_files/Reclaiming%20Disk%20Space.png)

This is a Satoshi Nakamoto graphic.

Pruning Use
-----------

*   I am unable to characterize expected savings to pruning:
    *   Users report around 100x (500GB to 5GB)
    *   Most coins appear to be part of zero transactions
    *   Some large clusters of coins, like SN's, are valued at tenths of trillions USD but if mobilized would probably tank the valuation.
    *   So coin velocity, median/average transactions, frequency are all very difficult to characterize.
    *   Also likely volatile.
*   In general: Crypto people I trust seem to think Bitcoin is mostly unoptimized and could get a lot more streamlined.
*   In general: Hard for competing standards to catch on.

Pruning Efficacy
----------------

*   We can see how much better one Merkle tree is if maximally pruned.
    *   Have around 4k transactions per block
    *   So for binary Merkle trees, that is log2(4k) ~= 12 levels
    *   That is 2^12 leaves, 2^12 nodes of above them, 2^11 nodes above those, etc.
    *   Σ 2_n_ = 2_n+1_\-1, or `>>> sigma = lambda x : sum([2 ** n for n in range(x+1)]) >>> close = lambda x : 2 ** (x + 1) - 1 # for "closed form" >>> for x in range(50): ... assert(close(x) == sigma(x)) ... >>>`
    *   Any unpruned tree would have 2^13-1 internal and 2^12 leaf nodes
    *   A tree with one remaining transaction would have on leaf node and two internal nodes per 'level'
    *   That is, 2\*12 internal and 1 leaf node. `>>> savin = lambda x : (2*x + 1) / ( 2 ** (x + 1) + 2 ** x - 1 ) >>> savin(10) 0.006838163464669489 >>> savin(12) 0.002034670790266135`

On Memory Usage
---------------

*   Arithmetic!
    
    > A block header with no transactions would be about 80 bytes. If we suppose blocks are generated every 10 minutes, 80 bytes \* 6 \* 24 \* 365 = 4.2MB per year.
    
*   I don't think that estimate is accurate but I'm not sure why it wouldn't be. I think SN is only counting the block headers, not the trees?
    
    > With computer systems typically selling with 2GB of RAM as of 2008, and Moore's Law predicting current growth of 1.2GB per year, storage should not be a problem even if the block headers must be kept in memory
    
*   In 2009 we see discussions of expected computing growth and decision making on memory/storage in distributed systems (!!!)
    
    > It is possible to verify payments without running a full network node.
    
*   SN notes you can just submit a transaction and if it's accepted assume the coins for it were in the correct hands. This does markedly reduce the need for individuals (but not the full network) to store transaction histories.

Transactions
------------

*   We previously imagined a coin contains:
    1.  The public key of the current owner
    2.  The record of all previous owners
    3.  The signature of the previous owner, generated over (1) and (2)
*   These are all integers, more or less, that can be verified. `>>> Coin(*[randint(0,1024 * 1024) for _ in range(3)]) <Coin object at 0x7f765208eb90> # NOT verified`
*   Well... there's actually no reason to have a single former owner or future owner.
*   So transactions can have multiple inputs before being bundled in hash trees.
*   We can think of them as dictionaries of send/recieve signatures and values.
    *   After this semester, we will change ownership of evening classes! `>>> Coin({'ckd': 2, 'jr': 2, 'hc':1, 'lc': 1, 'gp': 1} {'hks': 2, 'rb': 2, 'hi':2, 'fa': 1, 'ir': 1} hash(...)) <Coin object at 0x7f765208eb90>`
    *   This has a de facto negative transaction fee (it's a bad metaphor)
        *   Mostly: This allows transactions to not all be off the same price.
        *   This allows using a unique ID for transactions and still spend all at once.

Multi Transaction
-----------------

*   We can visualize as follows:

  
![](Blockchain_files/1w.png)

This is a Satoshi Nakamoto graphic.

Privacy
-------

> The necessity to announce all transactions publicly precludes this method, but privacy can still be maintained by breaking the flow of information in another place: by keeping public keys anonymous.

*   SN claims that breaking keys (say, account numbers) from personal identifying information achieves privacy.
*   CD claims the considerable metadata leaks are a marked loss in privacy, but that's okay.
*   Banks have full knowledge and routinely have e.g. data breaches, illegal ad targetting, etc.
*   [Wells Fargo Agrees to Pay $3 Billion to Resolve Criminal and Civil Investigations into Sales Practices Involving the Opening of Millions of Accounts without Customer Authorization](https://www.justice.gov/opa/pr/wells-fargo-agrees-pay-3-billion-resolve-criminal-and-civil-investigations-sales-practices)
*   This 'big banks perspective actually isn't too far off.
    
    > This is similar to the level of information released by stock exchanges
    
*   Lastly - if you have been part of _n_ transactions, it is simple enough to use a distinct key for each, providing a slightly higher level of protection against privacy violations and any case were an attacker gains access to your key.
    
    > As an additional firewall, a new key pair should be used for each transaction to keep them from being linked to a common owner.
    

Privacy
-------

*   We can visualize as follows:

  
![](Blockchain_files/1_bE7DuVZlL_LVNe8R1t_qJA.png)

This is a Satoshi Nakamoto graphic.

Bonus: Calculations
-------------------

*   SN closes with a brief essay on probability, including calculations in the C programming language
*   Also known as: my favorite thing.
*   Regard the following as bonus slides, but that are really cool!

Calculations
------------

> We consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain.

*   In the (quite) early days, gaining a control of a majority of miners was regarded as impossible.
*   In 2014, it happened: GHash.io, a mining consortium, achieved 51% of compute power.
*   Read more on [Wikipedia](https://en.wikipedia.org/wiki/GHash.io)
*   GHash.io voluntarily committed to a 40% cap to avoid devaluing their holdings.
*   In any case, this risk was foreseen by SN (and, frankly, everyone else) and is discussed.

Calculations
------------

> We consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain.

*   We use a "Binomial Random Walk"
    *   We progress along the integer number line, that is, {..., -1, 0, 1, 2...}
    *   The value given is the length lead maintained by the "honest" (non-attacker) chain.
    *   So if the honest chain is lenght 1010, and the attack is lenght 1000, the walk is at 10.
*   Attacker outpacing is equivalent to the "Gambler's Ruin" problem.
    *   Gambler has infinite $ and targets breakeven in potentially infinite time
*   SN uses mathematical notation, I'll use Python. `def prob_attk_ctch(attk_blck_bhnd, prob_next_hnst, prob_next_attk): assert(prob_next_hnst + prob_next_attk == 1) z = attk_blck_bhnd p, q = prob_next_hnst, prob_next_attk if (p <= q): return 1 if (p > q): return (q / p) ** z`
*   prob\_attk\_ctch(z, p, q) is the probabilty an attacker _z_ blocks behind an honest chain catches up given that the attack controls fraction share _q_ ∈ \[0,1\] of the total nodes.

Calculations
------------

> We consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain.

*   Much easier if we consider a single attacker calculating their catchup probability. `def prob_ctch(blck_bhnd, node_frac): z, p, q = blck_bhnd, 1 - node_frac, node_frac if (p <= q): return 1 if (p > q): return (q / p) ** z`
*   These numbers are actually higher than I intuitively expected, using e.g. GHash.io's 40% (assuming GHash.io somehow became compromised) `>>>> {n:prob_ctch(n, .4) for n in range(1,10,2)} {1: 0.6666666666666667, 3: 0.2962962962962964, 5: 0.13168724279835398, 7: 0.05852766346593512, 9: 0.026012294873748946} >>> {n/10:prob_ctch(3, n/10) for n in range(1,5)} {0.1: 0.0013717421124828536, 0.2: 0.015625, 0.3: 0.07871720116618078, 0.4: 0.2962962962962964}`

Calculations
------------

> Given our assumption that _p > q_, the probability drops exponentially as the number of blocks the attacker has to catch up with increases.

*   It occurs to me I can write this in .js with a canvas element.

  
function qz(z, q) { const p = 1 - q if (p <= q) { return 1 } else if (p > q) { return Math.pow(q / p, z) } } function draw() { const q = document.getElementById('q').value const z = document.getElementById('z').value const c = document.getElementById('plot').getContext("2d") c.strokeStyle = "white" c.clearRect(0,0,800,800) c.strokeStyle = "black" for ( let i = 0 ; i < 800 ; i++ ) { c.fillRect(i, 800 - qz(i \* z / 800, q) \* 800, 2, 2) } }  Set _q_ ∈ (0,.5)  Set _z_ > 0  

code
----

`<script> function qz(z, q) { const p = 1 - q if (p <= q) { return 1 } else if (p > q) { return Math.pow(q / p, z) } } function draw() { const q = document.getElementById('q').value const z = document.getElementById('z').value const c = document.getElementById('plot').getContext("2d") c.strokeStyle = "white" c.clearRect(0,0,800,800) c.strokeStyle = "black" for ( let i = 0 ; i < 800 ; i++ ) { c.fillRect(i, 800 - qz(i * z / 800, q) * 800, 2, 2) } } </script> <input value=".4" type="number" min="0" max="0.5" id="q"> <button onclick="draw()" type="button">Set <em>q</em> ∈ (0,.5)</button> <input value="5" type="number" min="1" id="z"> <button onclick="draw()" type="button">Set <em>z</em> > 0 </button><br> <canvas style="background-color:white" id="plot" width="800" height="800"></canvas>`

FIN
---

*   Distributed consensus is non-trivial.
*   It tends to rely on math in the most classical sense of the term.
*   It allows a lot of new possibilities.
*   It uses a lot of cloud technologies.
*   It powers a lot of cloud technologies.