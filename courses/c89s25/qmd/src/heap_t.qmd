<style>
  * {
    background-repeat: no-repeat;
    background-attachment: fixed;
  }
</style>

---
title: heap_t
subtitle: "HW 0xC: Due Th, 17 Apr"

format: 
  html:
    theme: vapor
    mainfont: monospace
    highlight-style: github
    title-block-banner: true
---

# Review&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#review" role="button" aria-expanded="false" aria-controls="review">Show</a>

::: {#review .collapse .multi-collapse}

### Goal: Implement an data structure based sorting algorithm.

:::{.callout-note title="On Due Dates"}

- I am not allowed to make assignments due during finals.
- However, I am supportive of "no excuse" late turn-ins up until the final project is due.

:::

- This is the first of two "data structures" assignments, implementing the "Merkle tree" of blockchain.
- The data stored by the structure is untyped and the heap is provided only with its size.
  - The same is true of the provided comparison function.
- It is split over 3 files:
  - `tester.c` which is an example of how some client could use `heap_t`
  - `heap_t.h` which the public API you will implement, as with `list_t`
    - You may not change any lines and must use the array implementation.
    - This is learning objective of the assignment.
  - `heap_t.c` where you have some freedom but will be implementing known algorithms.
  - Additionally, a Makefile is provided.

:::

# heap_t&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#heaper" role="button" aria-expanded="false" aria-controls = "heaper">Show</a>

::: {#heaper .collapse .multi-collapse}

## Initialize or construct a new heap.

- You may not change the type but may change the names.]
- Implement a max heap, wherein the maximum element per the comparison function called `gt` below is in the initial position.
- You may 1-index or 0-index.

```{.c}
typedef bool int;

typedef struct heap_struct {
  size_t ele_size;
  bool (*gt)(void *, void *); /* for "greater than" */
  void *eles;
}
```



:::



# insert&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#header" role="button" aria-expanded="false" aria-controls = "header">Show</a>

::: {#header .collapse .multi-collapse}

## Insert an element


:::



# maxpop&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#maxpop" role="button" aria-expanded="false" aria-controls = "maxpop">Show</a>

::: {#maxpop .collapse .multi-collapse}

## Initialize or construct a new heap.

:::


# l_to_h&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#option" role="button" aria-expanded="false" aria-controls = "option">Show</a>

::: {#option .collapse .multi-collapse}

## Challenge Problem: List to heap.

- Convert a list to heap.
- Was more interesting to me as a creating a novel heap and preserving the initial list, but as a challenge problem you may set your own function type.

```{.c}
heap_t l_to_h(list_t l);
```

- Reasonable to make an `h_to_l` as well or not, the first direction seemed more interesting to me.

:::

# h_sort&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#h_sort" role="button" aria-expanded="false" aria-controls = "h_sort">Show</a>

::: {#h_sort .collapse .multi-collapse}

## Challenge Problem: Heap sort a list

- Ensure you leak no memory.
- I found inplace (via the void return) *more interesting* than returning a new list, but not, I would say, easier.

```{.c}
void h_sort(list_t l);
```

:::


# Tester&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#tester" role="button" aria-expanded="false" aria-controls = "tester">Show</a>

::: {#tester .collapse .multi-collapse}

## Novel Tester

- Versus other testers this term, I wanted to provide a more concrete file that actually used the list_t, performed operations, and issued outputs as print statements.
- I hope that tester is self-documenting, but would love to hear your questions!

<iframe width="100%" height="500em" src="https://cd-public.github.io/calvinism/?uri=https://raw.githubusercontent.com/cd-c89/crypto/refs/heads/main/list_t/tester.c"></iframe>


:::