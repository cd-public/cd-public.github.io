Enigma was highly non-obvious to me, so I did the following.

I opened EnigmaModel.py. I only wrote code in this file.

I imported everything from EnigmaConstants. This was not imported by default. I added the import when I need the rotor constants, in Milestone 3.

To avoid writing "self" a million times, I created 6 values outside of the class. They were:
* A list of characters called "lite". This list is either of length 2 or length 0. It stores the currently depressed key in the first position, and the currently lit lamp in the second position. Initially, these values are the same. I editted it only with .append and .clear. Knowing what I know now, I would've used a dictionary lite = {"keys":None;"lamp":None}
* An alias for ROTOR_PERMUTATIONS I called "rtrs". In practice this was unnecessary, I didn't realize I'd only refer to the rotors twice.
* A list of three integers called "offs". These are integers from 0 to 25. They are the integer offsets of each of the rotors. I don't know the names of the rotors, I just tweaked the code until the rotor and offset index were the same.

The next three were functions:
* ind(a:str)->int which takes a letter and returns its index in the alphabet.
* rot(a:str, n:int)->str which rotates through the alphabet _n_ letters from _a_.
* ltr(n:int)->str which takes an index in the alphabet and returns a letter.

I wrote no other functions or classes.

I editted _n_ methods in EnigmaModel (feels like... 4?)

I updated "is_key_down" and "is_lamp_on" to just check if a letter is in my character list "lite". "key" checked against lite[0], and "lamp" against lite[1]. Since lite could be empty, I shortcircuited with an and.

I updated "key_released" to use the .clear method on my character list lite.

I updated "get_roto_letters" to return the 'ltr' of the offset.

I updated rotor_clicked to increase the offset. Remember you need a modulo here, I forgot mine until writing this.

The entire logic of the engima machine I wrote as 18 lines of code in "key_pressed". 
* The first 8 dealt with the extremely obnoxious rotor rotation. I don't know an elegant way to do base 26 in Python.
* I added the pressed letter to lite
* I wrote one "forward" for loop. It took a letter, converted the letter to an index, looked at the letter at that index in the relevant rotor, and set the letter to be the character at that index. It did this three times, from rotor 2 to 1 to 0. Of note, when adding the rotor advance, I rotated the letter before and after this process by the rotor offset.
* For the reflector, I updated the letter to be equal to ith letter of the alphabet where _i_ is the index of the original letter in the reflector.
* I wrote one "backward" for loop. It took a letter, looked up the index of that letter in a rotor, and returned the letter in alphabet that corresponded to that index. It also had before-and-after rotations. My most annoying bug was having these rotations backwards.
* I appended this final letter to lite.

In all, my EnigmaModel was 92 lines, up from 59. I unfortunately didn't take progress snapshots (since I didn't realize what I was doing) but I believe I skipped 1-3 other than writing the helper functions. I did 5 and 6 concurrently to use to the demo, so for me this was a 3 milestone project where 2/3 of the code was in a single function. I don't actually know what EnigmaRotor class would do since the rotors are provided, but I could imagine that the helper functions could be stored in such a class. However, the alphabet-index-to-letter function is also used by "get_rotor_letter".

I initially required 4 lintes of print statements, all within key_pressed, to determine how the permutation work by checking against the demo.